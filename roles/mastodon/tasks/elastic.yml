---
- name: Create elastic persistentVolume
  kubernetes.core.k8s:
    template: elastic-pv.yaml.j2
  when: storage_class_name == "nfs"
- name: Create elastic persistentVolumeClaim
  kubernetes.core.k8s:
    template: elastic-pvc.yaml.j2
- name: Create elastic deployment
  kubernetes.core.k8s:
    definition:
      kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: '{{ ansible_operator_meta.name }}-elastic'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        replicas: 1
        strategy:
          type: Recreate
        selector:
          matchLabels:
            app.kubernetes.io/name: '{{ ansible_operator_meta.name }}-elastic'
            app.kubernetes.io/instance: '{{ ansible_operator_meta.name }}'
            app.kubernetes.io/part-of: mastodon-operator
            app.kubernetes.io/managed-by: kustomize
            app.kubernetes.io/created-by: mastodon-operator
            app.kubernetes.io/component: elastic
        template:
          metadata:
            labels:
              app.kubernetes.io/name: '{{ ansible_operator_meta.name }}-elastic'
              app.kubernetes.io/instance: '{{ ansible_operator_meta.name }}'
              app.kubernetes.io/part-of: mastodon-operator
              app.kubernetes.io/managed-by: kustomize
              app.kubernetes.io/created-by: mastodon-operator
              app.kubernetes.io/component: elastic
          spec:
            initContainers:
              - name: elastic-init
                image: busybox:latest
                imagePullPolicy: Always
                command: ['sh', '-c', 'chown -R 1000:1000 /usr/share/elasticsearch/data']
                volumeMounts:
                  - name: elastic-data
                    mountPath: /usr/share/elasticsearch/data
            containers:
              - name: elastic
                image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
                imagePullPolicy: Always
                env:
                  - name: discovery.type
                    value: single-node
                  - name: cluster.name
                    value: '{{ ansible_operator_meta.name }}-elastic'
                  - name: xpack.security.enabled
                    value: "false"
                  - name: xpack.license.self_generated.type
                    value: basic
                  - name: xpack.watcher.enabled
                    value: "false"
                  - name: xpack.graph.enabled
                    value: "false"
                  - name: xpack.ml.enabled
                    value: "false"
                  - name: thread_pool.write.queue_size
                    value: "1000"
                  - name: ES_JAVA_OPTS
                    value: '{{ elasticsearch_java_opts }}'
                ports:
                  - containerPort: 9200
                    name: elastic
                volumeMounts:
                  - name: elastic-data
                    mountPath: /usr/share/elasticsearch/data
            volumes:
              - name: elastic-data
                persistentVolumeClaim:
                  claimName: '{{ ansible_operator_meta.name }}-elastic-pvc'
- name: Create elastic service
  kubernetes.core.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: '{{ ansible_operator_meta.name }}-elastic'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        selector:
          app.kubernetes.io/name: '{{ ansible_operator_meta.name }}-elastic'
          app.kubernetes.io/instance: '{{ ansible_operator_meta.name }}'
          app.kubernetes.io/part-of: mastodon-operator
          app.kubernetes.io/managed-by: kustomize
          app.kubernetes.io/created-by: mastodon-operator
          app.kubernetes.io/component: elastic
        ports:
          - name: elastic
            port: 9200
            targetPort: 9200
        type: ClusterIP
